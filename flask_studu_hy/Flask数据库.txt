###使用Flask-SQLAlchemy创建模型与表的映射：
1.模型需要继承自'db.model',然后需要映射到表中的属性，必须写成'db.Colun'的数据类型。
2.数据类型：
	*'db.Integer'代表的是整形
	*'db.String'代表的是'varchar'需要制定最长的长度。
	*'db.text'代表的是'text'
3.其他参数：
	*'primary_key':代表的是将这个字段设置为主键
	*'autoincrement'：代表的是这个主键为自增长的
	*'nullable':代表的是这个字段是否可以为空，默认可以为空，可以设置为false，这样在数据库中这个值就不可以为空
4.最后需要调用'db.create_all'来将模型真正的创建到数据库中。

###Flask-SQLAlchemy数据的增删改查：
所有的增删改查操作都是在session中进行，
1.增：
    '''
    #增加：
    article1 = Article（title=‘aaa’,content = 'bbb'）
    db.session.add(article1)
    #事务
    db.session.commit()
    '''
2.查：（改和删都基于查之上）
    '''
    #查
	# select * from article wher title='aaa':
	result = Article.query.filter(Article.title=='aaa').first()
	print 'title:%s' % result.title
	print 'content:%s' % result.content
    '''
3.改:
    '''
    #改：
	#1.查找出要改的数据
	article1= Article.query.filter(Article.title=='aaa').first()
	#2.把需要修改的地方进行修改
	article1.title='new title'
	#3.做事务进行提交
	db.session.commit()
    '''
4.删：
    '''
    #删：
	#1.把需要删除的数据查找出来
	article1 = Article.query.filter(Article.content=='bbb').first()
	#2.把这条数据删除掉
	db.session.delete(article1)
	#3.做事务提交
	db.session.commit()
    '''

Flask-SQLALchemy外键及其关系：
1.外键：
    '''
    class User(db.Model):
	__tablename__='user'
	id = db.Column(db.Integer,primary_key=True,autoincrement=True)
	username = db.Column(db.String(100),nullable=False)
    # 如果表生成了，还想给它添加其他元素这是不可行的，比如说添加password这样的元素就不添加不了了
    class Article(db.Model):
	__tablename__='article'
	id = db.Column(db.Integer,primary_key=True,autoincrement=True)
	title = db.Column(db.String(100),nullable=False)
	content = db.Column(db.Text,nullable=False)
	author_id = db.Column(db.Integer,db.ForeignKey('user.id'))

	author=db.relationship('User',backref=db.backref('articles'))
    '''
2.'author=db.relationship('User',backref=db.backref('articles'))'解释
    *给'article'这个模型添加一个author属性可以访问这篇文章的作者的数据，像访问普通模型一样
    *’backref‘是定义反向引用，可以通过user这个模型访问这个模型缩写的所有文章。
3.多对多：
    *多对多的关系，要通过一个中间表进行关联，
    *中间表，不能通过‘class’的方式来实现，只能通过‘db.table’的方式来实现
    *设置关联：‘tags=db.relationship('Tag',secondary=article_tag,backref=db.backref('articles'))’需要使用一个关键字参数‘secondary=中间表’来进行关联。
    *访问和数据添加可以通过以下方式进行操作：
    - 添加数据：
    '''
    # article1=Article(title='aaa')
	# article2=Article(title='bbb')
	# tag1=Tag(name='111')
	# tag2=Tag(name='222')
	# article1.tags.append(tag1)
	# article1.tags.append(tag2)
	# article2.tags.append(tag1)
	# article2.tags.append(tag2)
	#
	#
	# db.session.add(article1)
	# db.session.add(article2)
	# db.session.add(tag1)
	# db.session.add(tag2)
	# db.session.commit()
    '''

    - 访问数据：
    '''
    article1=Article.query.filter(Article.title =='aaa').first()
	tags = article1.tags
	for tag in tags:
		print(tag.name)
    '''

#Flask_Script的介绍与安装：
1.Flask-Script：Flask-Script的作用就是可以通过命令行的形式来操作Flask。例如通过命令跑一个开发版本的服务器，设置数据库，定时任务。
2.安装：首先进入到虚拟环境中，然后’pip install flask-script‘来进行安装
3.如果直接在主manage.py中写命令，那么在终端就只需要'python manage.py aommand_name'就可以了。
4.如果把一些命令集中到一个文件中，那么在终端就需要输入一个父命令，然后在加上里面的子命令，例如：'python manage.py db init'。
5.例子：
    '''
    from flask_script import Manager
    from flask_script_demo import app
    from db_scripts import DBManager

    manager = Manager(app)
    @manager.command
    def runserver():
        print 'the server is running!!!!'

    manager.add_command('db',DBManager)
    if __name__=='__main__':
        manager.run()
    '''
6.子命令例子：
    '''
    from flask_script import Manager
    DBManager = Manager()

    @DBManager.command
    def init():
        print 'complete thr inital of database'

    @DBManager.command
    def migrate():
        print 'complete thr remigrate of database'
    '''

### 分开models以及解决循环引用：
1.分开models的目的：为了让代码更加方便的管理
2.如何解决循环引用：把‘db’放在一个单独的文件中，切断循环引用的线条就可以了

### Flask-Migrate的介绍与安装：
1.介绍：因为采用'db.create_all'在后期修改字段的时候，不会自动的映射到数据库中，必须删除表，然后重新运行db.create_all才会重新映射，这样不符合我们的需求，因此flask-migrate就是为了解决这个问题出现的，它可以在每次修改模型后，可以将修改的东西映射到数据库中。


2.首先进入虚拟环境中，pip install flask-migrate就可以安装了
3.使用'flask_migrate'必须借助‘flask_scripts’,这个包的MigrateCommand中博阿寒了所有和数据库有关的命令
4.'flask_migrate'相关的命令：
    *'python manage.py db init':初始化一个迁移脚本的环境，只需要执行一次
    *'python manage.py db migrate'将模型生成迁移文件，只要模型改了，就需要执行一次这个命令
    *'python manage.py db upgrade'将迁移文件真正的映射到数据库中，每次运行了'migrate'命令都要在执行upgrade命令
5.注意点：
需要将你想要映射到数据库中的模型，都要导入到manage.py文件中，如果没有导入进去，就不会映射到数据库中。
6.manage.py的相关代码：
    '''
    from flask_script import Manager
    from migrate_demo import app
    from flask_migrate import Migrate,MigrateCommand
    from exts import db
    from models import Article

    #init
    #migrate
    #upgrade
    #模型->迁移文件->表

    manager = Manager(app)

    #1.要使用flask_migrate,必须绑定app和db
    migrate=Migrate(app,db)

    #2.把MigrateCommand命令添加到manager中
    manager.add_command('db',MigrateCommand)

    if __name__ == '__main__':
        manager.run()
    '''











































